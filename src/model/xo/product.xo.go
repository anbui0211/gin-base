package xomodel

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"time"
)

// Product represents a row from 'public.products'.
type Product struct {
	ID           int       `json:"id"`            // id
	ProductID    string    `json:"product_id"`    // product_id
	Name         string    `json:"name"`          // name
	SearchString string    `json:"search_string"` // search_string
	CategoryID   int       `json:"category_id"`   // category_id
	Quantity     int       `json:"quantity"`      // quantity
	Price        string    `json:"price"`         // price
	Status       string    `json:"status"`        // status
	CreatedAt    time.Time `json:"created_at"`    // created_at
	UpdatedAt    time.Time `json:"updated_at"`    // updated_at
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [Product] exists in the database.
func (p *Product) Exists() bool {
	return p._exists
}

// Deleted returns true when the [Product] has been marked for deletion
// from the database.
func (p *Product) Deleted() bool {
	return p._deleted
}

// Insert inserts the [Product] to the database.
func (p *Product) Insert(ctx context.Context, db DB) error {
	switch {
	case p._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case p._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.products (` +
		`product_id, name, search_string, category_id, quantity, price, status, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9` +
		`) RETURNING id`
	// run
	logf(sqlstr, p.ProductID, p.Name, p.SearchString, p.CategoryID, p.Quantity, p.Price, p.Status, p.CreatedAt, p.UpdatedAt)
	if err := db.QueryRowContext(ctx, sqlstr, p.ProductID, p.Name, p.SearchString, p.CategoryID, p.Quantity, p.Price, p.Status, p.CreatedAt, p.UpdatedAt).Scan(&p.ID); err != nil {
		return logerror(err)
	}
	// set exists
	p._exists = true
	return nil
}

// Update updates a [Product] in the database.
func (p *Product) Update(ctx context.Context, db DB) error {
	switch {
	case !p._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case p._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.products SET ` +
		`product_id = $1, name = $2, search_string = $3, category_id = $4, quantity = $5, price = $6, status = $7, created_at = $8, updated_at = $9 ` +
		`WHERE id = $10`
	// run
	logf(sqlstr, p.ProductID, p.Name, p.SearchString, p.CategoryID, p.Quantity, p.Price, p.Status, p.CreatedAt, p.UpdatedAt, p.ID)
	if _, err := db.ExecContext(ctx, sqlstr, p.ProductID, p.Name, p.SearchString, p.CategoryID, p.Quantity, p.Price, p.Status, p.CreatedAt, p.UpdatedAt, p.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [Product] to the database.
func (p *Product) Save(ctx context.Context, db DB) error {
	if p.Exists() {
		return p.Update(ctx, db)
	}
	return p.Insert(ctx, db)
}

// Upsert performs an upsert for [Product].
func (p *Product) Upsert(ctx context.Context, db DB) error {
	switch {
	case p._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.products (` +
		`id, product_id, name, search_string, category_id, quantity, price, status, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`product_id = EXCLUDED.product_id, name = EXCLUDED.name, search_string = EXCLUDED.search_string, category_id = EXCLUDED.category_id, quantity = EXCLUDED.quantity, price = EXCLUDED.price, status = EXCLUDED.status, created_at = EXCLUDED.created_at, updated_at = EXCLUDED.updated_at `
	// run
	logf(sqlstr, p.ID, p.ProductID, p.Name, p.SearchString, p.CategoryID, p.Quantity, p.Price, p.Status, p.CreatedAt, p.UpdatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, p.ID, p.ProductID, p.Name, p.SearchString, p.CategoryID, p.Quantity, p.Price, p.Status, p.CreatedAt, p.UpdatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	p._exists = true
	return nil
}

// Delete deletes the [Product] from the database.
func (p *Product) Delete(ctx context.Context, db DB) error {
	switch {
	case !p._exists: // doesn't exist
		return nil
	case p._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.products ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, p.ID)
	if _, err := db.ExecContext(ctx, sqlstr, p.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	p._deleted = true
	return nil
}

// ProductByID retrieves a row from 'public.products' as a [Product].
//
// Generated from index 'products_pkey'.
func ProductByID(ctx context.Context, db DB, id int) (*Product, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, product_id, name, search_string, category_id, quantity, price, status, created_at, updated_at ` +
		`FROM public.products ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	p := Product{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&p.ID, &p.ProductID, &p.Name, &p.SearchString, &p.CategoryID, &p.Quantity, &p.Price, &p.Status, &p.CreatedAt, &p.UpdatedAt); err != nil {
		return nil, logerror(err)
	}
	return &p, nil
}
